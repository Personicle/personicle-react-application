require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")
require File.join(File.dirname(`node --print "require.resolve('@react-native-community/cli-platform-ios/package.json')"`), "native_modules")

require 'json'
require 'xcodeproj'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

platform :ios, podfile_properties['ios.deploymentTarget'] || '12.0'
install! 'cocoapods',
  :deterministic_uuids => false

target 'personicleapplication' do
  use_expo_modules!
  config = use_native_modules!

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => flags[:hermes_enabled] || podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Dir.pwd}/.."
  )

  # Uncomment to opt-in to using Flipper
  # Note that if you have use_frameworks! enabled, Flipper will not work
  #
  # if !ENV['CI']
  #   use_flipper!()
  # end

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end


  def update_pod_build_phase_order(xcodeproj_path, target_name)
      puts "Updating build phase order of '[CP] Embed Pods Frameworks' in #{xcodeproj_path}, #{target_name} \n"
      project = Xcodeproj::Project.open(xcodeproj_path)
      target = project.targets.select { |t| t.name == target_name }.first
      puts "Found target: #{target.name}\n"
      cocoapods_index = target.build_phases.index { |b|
          name = b.name if b.respond_to? :name
          name == "[CP] Embed Pods Frameworks"
      }
      if cocoapods_index.nil? == false
          puts "#{target_name}: '[CP] Embed Pods Frameworks' index was: #{cocoapods_index}, moving to index 3.\n"
          target.build_phases.move_from(cocoapods_index, 3) # move further to the top
      end
      project.save
  end


  # post_integrate do |installer|
  #     update_pod_build_phase_order("./Pods/Pods.xcodeproj", "ExpoModulesCore")
  # end

  post_integrate do |installer|
    begin
      # update_pod_build_phase_order("./Pods/Pods.xcodeproj", "ExpoModulesCore")
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end

end
